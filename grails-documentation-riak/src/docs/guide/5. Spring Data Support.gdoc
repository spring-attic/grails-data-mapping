The Riak support for GORM is actually built on top of the Riak support for [Spring Data|https://www.springsource.org/spring-data]. As such, the Riak plugin provides full access to a @org.springframework.data.keyvalue.riak.core.RiakTemplate@ or @org.springframework.data.keyvalue.riak.core.AsyncRiakTemplate@ object you can inject into your own components. The former is for synchronous access to Riak, the latter is for asynchronous access.

For example, in a controller:

{code}
class MyController {
    def riakTemplate

    def foo = {
        def notifs = riak.get("notifications", "myuser")
        render "Notifications: \$notifs"
    }
}
{code}

Or, for asynchronous access:

{code}
class MyController {
    def asyncRiakTemplate

    def foo = {
        def callback = [
            completed: { metadata, val ->
                // Since this is run asynchronously,
                // put the data somewhere else...
            },
            failed: { err ->
                log.error(err.message, err)
            }
        ] as AsyncKeyValueStoreOperation
        riak.get("notifications", "myuser", callback)

        // The previous call doesn't block, so we continue on...
        render "Notifications: \$notifs"
    }
}
{code}

See the Spring Data reference for more information on the methods available and on examples of using the @RiakTemplate@ in your own code.
