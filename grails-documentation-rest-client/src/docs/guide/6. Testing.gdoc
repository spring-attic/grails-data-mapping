GORM for REST uses Spring's RestTemplate under the covers, so testing can be done with Spring's [MockRestServiceServer|http://static.springsource.org/spring/docs/current/javadoc-api/org/springframework/test/web/client/MockRestServiceServer.html] API. 

Here is an example integration test:

{code}

package amazon.client

import static org.springframework.test.web.client.match.MockRestRequestMatchers.method
import static org.springframework.test.web.client.match.MockRestRequestMatchers.header
import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo
import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess

import org.springframework.http.HttpMethod
import org.springframework.http.HttpHeaders
import org.springframework.http.MediaType
import org.springframework.test.web.client.MockRestServiceServer
import org.springframework.web.client.RestTemplate

import grails.test.spock.IntegrationSpec

class BookSpec extends IntegrationSpec {

    void 'Book list returns correct number of books'() {
        given:
        RestTemplate rt = Book.restBuilder.restTemplate
        final MockRestServiceServer mockServer = MockRestServiceServer.createServer(rt)
        mockServer.expect(requestTo("http://localhost:8080/amazon/books"))
                .andExpect(method(HttpMethod.GET))
                .andExpect(header(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON.toString()))
                .andRespond(withSuccess('[{"id":1, "title":"The Stand", "pages":200}]', MediaType.APPLICATION_JSON))

        when:
        List results = Book.list()

        then:
        results.size() == 1
    }

}

{code}
