As mentioned in the previous section you must specify the properties that can be queried with @index:true@ in your mapping block. Once a property can be queried upon then there are several ways to do it including:

* [Dynamic Finders|https://grails.org/doc/latest/guide/5.%20Object%20Relational%20Mapping%20(GORM).html#5.4.1%20Dynamic%20Finders]
* [Criteria|https://grails.org/doc/latest/guide/5.%20Object%20Relational%20Mapping%20(GORM).html#5.4.2%20Criteria]
* [Named Queries|https://grails.org/doc/latest/ref/Domain%20Classes/namedQueries.html]

These queries operate in largely the same way as they do with GORM for Hibernate. Note, however, that each criterion used in a query results in querying another index and although GORM for Redis caches query results you should be careful not to use too many criteria as it will impact query performance.

A good way to debug your query performance is to go to your Redis distribution and type the following in a command or terminal window:

{code}
$ ./redis-cli
$ MONITOR
{code}

The @MONITOR@ command will allow you to monitor the commands that the currently running Redis server is receiving and responding to. Great for debugging!

