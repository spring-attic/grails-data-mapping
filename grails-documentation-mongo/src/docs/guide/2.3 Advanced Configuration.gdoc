As mentioned the GORM for Mongo plugin will configure all the defaults for you, but if you wish to customize those defaults you can do so in the your @grails-app/conf/DataSource.groovy@ file:

{code}
grails {
    mongo {
        host = "localhost"
        port = 27107
        username = "blah"
        password = "blah"
        databaseName = "foo"
    }
}
{code}

The @databaseName@ setting configures the default database name. If not specified the @databaseName@ will default to the name of your application.

You can also customize the Mongo connection settings using an @options@ block:

{code}
grails {
    mongo {
        options {
            autoConnectRetry = true
            connectTimeout = 300
        }
    }
}
{code}

Available options and their descriptions are defined in the [MongoOptions|https://api.mongodb.org/java/current/com/mongodb/MongoOptions.html] javadoc.

In production scenarios you will typically use more than one Mongo server in either [master/slave|https://www.mongodb.org/display/DOCS/Master+Slave] or [replication|https://www.mongodb.org/display/DOCS/Replication] scenarios. The plugin allows you to configure [replica pairs|https://www.mongodb.org/display/DOCS/Replica+Pairs]:

{code}
grails {
    mongo {
        replicaPair = [ "localhost:27017", "localhost:27018"]
    }
}
{code}

Or [replica sets|https://www.mongodb.org/display/DOCS/Replica+Sets]:

{code}
grails {
    mongo {
        replicaSet = [ "localhost:27017", "localhost:27018"]
    }
}
{code}

The replica sets are defined using a list of strings that conform to the Mongo [DBAddress|https://api.mongodb.org/java/current/com/mongodb/DBAddress.html] specification.
